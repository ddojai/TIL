(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{398:function(t,a,_){"use strict";_.r(a);var r=_(45),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"php-the-right-way"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#php-the-right-way"}},[t._v("#")]),t._v(" "),_("a",{attrs:{href:"https://modernpug.github.io/php-the-right-way/",target:"_blank",rel:"noopener noreferrer"}},[t._v("php-the-right-way"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"ch02-시작하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch02-시작하기"}},[t._v("#")]),t._v(" ch02. 시작하기")]),t._v(" "),_("h3",{attrs:{id:"안정된-최신버전-7-2-사용"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#안정된-최신버전-7-2-사용"}},[t._v("#")]),t._v(" 안정된 최신버전(7.2) 사용")]),t._v(" "),_("ul",[_("li",[t._v("5.6은 2018년 이후로 보안 업데이트 미지원")]),t._v(" "),_("li",[t._v("하위 호환성 문제 적음.")])]),t._v(" "),_("h3",{attrs:{id:"내장-웹-서버"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#내장-웹-서버"}},[t._v("#")]),t._v(" 내장 웹 서버")]),t._v(" "),_("ul",[_("li",[t._v("5.4 이상은 다른 웹서버의 설치와 설정 없이 바로 실행 가능")])]),t._v(" "),_("h3",{attrs:{id:"공통-디렉터리-구조"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#공통-디렉터리-구조"}},[t._v("#")]),t._v(" 공통 디렉터리 구조")]),t._v(" "),_("ul",[_("li",[t._v("내 코드를 어디에 두는가\n"),_("ul",[_("li",[t._v("DocumentRoot가 있는 곳")]),t._v(" "),_("li",[t._v("답변은 완전하지는 않지만 시작하기에 좋은 곳")])])]),t._v(" "),_("li",[t._v("Standard PHP Package Skeleton\n"),_("ul",[_("li",[t._v("https://github.com/php-pds/skeleton")]),t._v(" "),_("li",[t._v("DocumentRoot는 public/")]),t._v(" "),_("li",[t._v("단위 테스트는 tests/")]),t._v(" "),_("li",[t._v("composer가 설치 한 타사 라이브러리는 vendor/")])])])]),t._v(" "),_("h2",{attrs:{id:"ch03-코딩-스타일-가이드"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch03-코딩-스타일-가이드"}},[t._v("#")]),t._v(" ch03. 코딩 스타일 가이드")]),t._v(" "),_("ul",[_("li",[t._v("프레임워크 운용 그룹(Framework Interoperability Group)에서는 PSR-1, PSR-2, PSR-4라는 권장 스타일 가이드를 발표\n"),_("ul",[_("li",[t._v("https://www.php-fig.org/psr/")])])]),t._v(" "),_("li",[t._v("다음 두가지 도구 중 하나를 사용하여 코드 구조를 자동으로 수정 가능\n"),_("ul",[_("li",[t._v("매우 잘 테스트된 코드를 가진 PHP "),_("a",{attrs:{href:"https://github.com/squizlabs/PHP_CodeSniffer/wiki/Fixing-Errors-Automatically",target:"_blank",rel:"noopener noreferrer"}},[t._v("Coding Standards Fixer"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("PHP_CodeSniffer에 포함되어있는 "),_("a",{attrs:{href:"https://github.com/squizlabs/PHP_CodeSniffer/wiki/Fixing-Errors-Automatically",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP Code Beautifier and Fixer"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("또는, 쉘에서 phpcs를 수동으로 실행\n"),_("ul",[_("li",[t._v("이 이것을 git hook에 포함시키면 유용")]),t._v(" "),_("li",[t._v("그렇게 해서 정한 기준을 위반한 것을 포함한 브랜치는 위반한 것들을 고치기 전까지는 저장소에 넣지 못하게 제약")])])])])])]),t._v(" "),_("h2",{attrs:{id:"ch04-주목할만한-언어-특징"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch04-주목할만한-언어-특징"}},[t._v("#")]),t._v(" ch04. 주목할만한 언어 특징")]),t._v(" "),_("ul",[_("li",[t._v("PHP 5.0(2004) : 객체지향 프로그래밍(Object-oriented Programming) 개념이 추가")]),t._v(" "),_("li",[t._v("PHP 5.3(2009) : 익명 함수(와 클로저)와 네임스페이스 추가")]),t._v(" "),_("li",[t._v("PHP 5.4(2012) : 트레이트(trait) 개념이 추가")])]),t._v(" "),_("h3",{attrs:{id:"프로그래밍-패러다임"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#프로그래밍-패러다임"}},[t._v("#")]),t._v(" 프로그래밍 패러다임")]),t._v(" "),_("h4",{attrs:{id:"객체지향-프로그래밍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#객체지향-프로그래밍"}},[t._v("#")]),t._v(" 객체지향 프로그래밍")]),t._v(" "),_("ul",[_("li",[t._v("PHP는 클래스, 추상 클래스, 인터페이스, 상속, 생성자, 복제(cloning), 예외 등 완전한 객체지향 프로그래밍 개념을 가지고 있습니다.")])]),t._v(" "),_("h4",{attrs:{id:"함수형-프로그래밍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#함수형-프로그래밍"}},[t._v("#")]),t._v(" 함수형 프로그래밍")]),t._v(" "),_("ul",[_("li",[t._v("PHP는 일급 함수(first-class function)를 지원합니다. 이는 함수가 변수에 할당될 수 있다는 이야기")]),t._v(" "),_("li",[t._v("사용자가 정의한 함수나 내장 함수 모두 변수에 의해서 참조될 수 있고 동적으로 호출될 수 있습니다.")]),t._v(" "),_("li",[t._v("함수는 다른 함수의 인자로 전달될 수 있고, 함수가 다른 함수를 리턴값으로 리턴하는 것도 가능")]),t._v(" "),_("li",[t._v("PHP 5.4에서는 클로저를 특정 개체의 영역에 바인딩하는 기능이 추가.")]),t._v(" "),_("li",[t._v("대부분의 경우 익명 함수와 동일하게 사용할 수 있는 호출가능한 타입(callable) 지원이 강화")])]),t._v(" "),_("h4",{attrs:{id:"메타-프로그래밍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#메타-프로그래밍"}},[t._v("#")]),t._v(" 메타 프로그래밍")]),t._v(" "),_("ul",[_("li",[t._v("PHP는 Reflection API와 특수 매서드(Magic Method)같은 메커니즘을 통해서 다양한 형태의 메타 프로그래밍을 지원")]),t._v(" "),_("li",[t._v("__get(), __set(), __clone(), __toString(), __invoke() 등 개발자가 클래스의 동작에 끼어들 수 있도록 해주는 다양한 특수 매서드가 존재")])]),t._v(" "),_("h3",{attrs:{id:"네임-스페이스"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#네임-스페이스"}},[t._v("#")]),t._v(" 네임 스페이스")]),t._v(" "),_("ul",[_("li",[t._v("네임스페이스를 사용할 때 추천할 만한 방법이 PSR-4에 대략적으로 설명되어 있습니다.")]),t._v(" "),_("li",[t._v("2014년 10월에 PHP-FIG는 기존의 오토로드(autoloading) 표준인 PSR-0를 폐지(deprecated)")]),t._v(" "),_("li",[t._v("PSR-4는 PHP 5.3 이상에서만 적용이 되기 때문에 아직도 PHP 5.2 호환 프로젝트들은 PSR-0를 구현해 둔 상태")])]),t._v(" "),_("h3",{attrs:{id:"표준-php-라이브러리"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#표준-php-라이브러리"}},[t._v("#")]),t._v(" 표준 PHP 라이브러리")]),t._v(" "),_("ul",[_("li",[t._v("SPL에는 일반적으로 많이 사용되는 데이터 구조(스택, 큐, 힙 등)와 이러한 SPL 데이터 구조나 SPL 인터페이스를 여러분이 직접 구현한 클래스를 순회(traverse)하는데 사용할 수 있는 이터레이터들이 포함")])]),t._v(" "),_("h3",{attrs:{id:"커맨드라인-인터페이스"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#커맨드라인-인터페이스"}},[t._v("#")]),t._v(" 커맨드라인 인터페이스")]),t._v(" "),_("ul",[_("li",[t._v("커맨드라인 PHP 프로그램은 테스트, 배포, 관리 등 일반적인 작업을 자동화하는데 도움을 줄 수 있습니다.")]),t._v(" "),_("li",[t._v("웹어플리케이션 코드를 그대로 사용할 수 있다는 점이 CLI PHP 프로그램의 장점")])]),t._v(" "),_("h3",{attrs:{id:"xdebug"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xdebug"}},[t._v("#")]),t._v(" Xdebug")]),t._v(" "),_("ul",[_("li",[t._v("PHP용 디버거인 XDebug를 다양한 IDE와 함께 사용하여 중단점(Breakpoint)을 설정하거나 스택 내용을 볼 수 있습니다.")]),t._v(" "),_("li",[t._v("PHPUnit과 KCacheGrind 등의 도구와 같이 사용하면 코드 커버리지 분석이나 프로파일링을 할 수도 있습니다.")])]),t._v(" "),_("h2",{attrs:{id:"ch05-의존성-관리"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch05-의존성-관리"}},[t._v("#")]),t._v(" ch05. 의존성 관리")]),t._v(" "),_("ul",[_("li",[t._v("Composer와 PEAR라는 패키지 관리 시스템이 주로 사용되고 있습니다.")]),t._v(" "),_("li",[t._v("Composer는 PHP를 사용하는데 있어 주된 패키지 관리자입니다.")]),t._v(" "),_("li",[t._v("옛날에는 PEAR가 그 역할을 꿰차고 있었습니다.")])]),t._v(" "),_("h3",{attrs:{id:"composer와-packagist"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#composer와-packagist"}},[t._v("#")]),t._v(" Composer와 Packagist")]),t._v(" "),_("ul",[_("li",[t._v("프로젝트의 의존성을 composer.json 파일에 기록하고 간단한 커맨드 몇 개를 사용하면 Composer가 알아서 다운로드하고 오토로딩(autoloading) 설정을 해줍니다.")]),t._v(" "),_("li",[t._v("이 패키지들은 Packagist라는 공식 저장소에서 확인할 수 있습니다.")]),t._v(" "),_("li",[t._v("배포할 때에는 composer update를 사용하지 말고 composer install를 사용하세요. 그렇지 않으면 배포 환경에는 다른 버전의 패키지를 사용하게 될 수도 있습니다.")])]),t._v(" "),_("h3",{attrs:{id:"pear"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pear"}},[t._v("#")]),t._v(" PEAR")]),t._v(" "),_("ul",[_("li",[t._v("PEAR는 각 패키지들이 정해진 구조에 따르도록 하고 있습니다")]),t._v(" "),_("li",[t._v("PEAR는 패키지를 시스템에 글로벌하게 설치합니다.")]),t._v(" "),_("li",[t._v("많은 프로젝트들이 같은 버전의 패키지를 사용한다면 장점으로 작용하지만 프로젝트들 사이에 버전 충돌이 난다면 문제가 될 수 있습니다")])]),t._v(" "),_("h4",{attrs:{id:"pear-의존관계를-composer로-관리하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pear-의존관계를-composer로-관리하기"}},[t._v("#")]),t._v(" PEAR 의존관계를 Composer로 관리하기")]),t._v(" "),_("ul",[_("li",[t._v("Composer를 이미 사용하고 있을 때 PEAR 패키지도 설치하고 싶다면, PEAR 패키지 의존관계를 관리하는 데에 Composer를 사용할 수도 있습니다")])]),t._v(" "),_("h2",{attrs:{id:"ch06-코딩-프랙티스"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch06-코딩-프랙티스"}},[t._v("#")]),t._v(" ch06. 코딩 프랙티스")]),t._v(" "),_("h3",{attrs:{id:"날짜와-시간"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#날짜와-시간"}},[t._v("#")]),t._v(" 날짜와 시간")]),t._v(" "),_("ul",[_("li",[t._v("DateTime 클래스는 일반적인 사용 시나리오에 맞는 괜찮은 객체지향적인 인터페이스를 제공합니다")]),t._v(" "),_("li",[t._v("하루의 길이가 매일 동일할 것이라고 가정하고 코드를 작성하지 않아야 합니다. 일광절약시간제(daylight saving time)나 시간대(timezon)의 변경에 따라서 하루의 길이는 달라질 수가 있기 때문입니다")]),t._v(" "),_("li",[t._v("날짜 계산을 할 때 초단위의 숫자를 사용하는 대신 DateInterval을 사용하세요")]),t._v(" "),_("li",[t._v("DateTime 개체를 일반적인 비교 연산자를 이용해서 비교하는 것이 가능합니다.")]),t._v(" "),_("li",[t._v("DatePeriod 클래스는 반복적으로 발생하는 사건을 다루는데 사용됩니다")]),t._v(" "),_("li",[t._v("Carbon은 유명한 PHP API 확장입니다. DateTime 클래스의 모든 것을 상속하여 코드 수정은 최소화했지만, 지역화(Localization) 지원, DateTime 객체의 더 나은 덧셈, 뺄셈 연산 및 포메팅 방식 등과 함께 날짜와 시간을 지정하여 코드를 테스트해볼 수 있는 방법과 같은 추가 기능을 포함하고 있습니다.")])]),t._v(" "),_("h3",{attrs:{id:"디자인-패턴"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#디자인-패턴"}},[t._v("#")]),t._v(" 디자인 패턴")]),t._v(" "),_("ul",[_("li",[t._v("어플리케이션을 제작할 때에 코드와 프로젝트 전체의 구조를 잘 알려진 패턴에 따라 구성하는 편이 좋습니다")]),t._v(" "),_("li",[t._v("https://designpatternsphp.readthedocs.io/")])]),t._v(" "),_("h3",{attrs:{id:"utf-8-사용하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#utf-8-사용하기"}},[t._v("#")]),t._v(" UTF-8 사용하기")]),t._v(" "),_("ul",[_("li",[t._v("UTF-8 문자열을 문제없이 처리할 수 있는 방법은 있지만, HTML 코드, SQL 쿼리, PHP 코드 등 웹 어플리케이션의 모든 레벨을 다뤄야 하는 수준의 이야기입니다")])]),t._v(" "),_("h4",{attrs:{id:"php-코드-수준에서의-utf-8"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#php-코드-수준에서의-utf-8"}},[t._v("#")]),t._v(" PHP 코드 수준에서의 UTF-8")]),t._v(" "),_("ul",[_("li",[t._v("유니코드 문자열을 다룰 때에는 항상 mb_로 시작하는 함수들을 사용해야 합니다")]),t._v(" "),_("li",[t._v("예를 들어 substr() 함수를 UTF-8 문자열에 대해서 사용해보면, 결과물에는 이상하게 깨진 글자가 나온다는 사실을 알게 될 좋은 기회")]),t._v(" "),_("li",[t._v("모든 문자열 함수가 그에 해당되는 멀티바이트 버전의 mb_ 로 시작되는 함수를 가지고 있는 것은 아닙니다")]),t._v(" "),_("li",[t._v("모든 PHP 스크립트 파일(또는 모든 PHP 스크립트에 include 되는 공용 스크립트)의 가장 윗부분에 mb_internal_encoding() 함수를 사용해서 문자열 인코딩을 지정하고, 그 바로 다음에 mb_http_output() 함수로 브라우저에 출력될 문자열 인코딩도 지정해야 합니다")]),t._v(" "),_("li",[t._v("많은 문자열 함수들이 함수 파라미터의 문자열 인코딩을 지정할 수 있는 옵셔널 파라미터를 제공한다는 사실")])]),t._v(" "),_("h4",{attrs:{id:"데이터베이스-수준에서의-utf-8"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#데이터베이스-수준에서의-utf-8"}},[t._v("#")]),t._v(" 데이터베이스 수준에서의 UTF-8")]),t._v(" "),_("ul",[_("li",[t._v("PHP에서 MySQL로 전달되는 문자열이 UTF-8로 확실히 전달되게 하려면, 사용하는 데이터베이스와 테이블이 모두 utf8mb4 캐릭터 셋과 콜레이션(collation)을 사용하게 해야합니다")]),t._v(" "),_("li",[t._v("PDO 연결문자열에도 utf8mb4 캐릭터 셋을 사용한다고 명시해야 합니다")]),t._v(" "),_("li",[t._v("UTF-8 문자열을 제대로 사용하려면 반드시 utf8mb4 캐릭터 셋을 사용해야 합니다.")])]),t._v(" "),_("h4",{attrs:{id:"브라우저-수준에서의-utf-8"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#브라우저-수준에서의-utf-8"}},[t._v("#")]),t._v(" 브라우저 수준에서의 UTF-8")]),t._v(" "),_("ul",[_("li",[t._v("PHP 스크립트가 UTF-8 문자열을 브라우저에 제대로 전송하게 하려면 mb_http_output() 함수를 사용하세요.")]),t._v(" "),_("li",[t._v("오늘날엔 HTTP 응답 헤더에 이렇게 charset을 설정해주는 것이 보편적입니다")])]),t._v(" "),_("div",{staticClass:"language-php extra-class"},[_("pre",{pre:!0,attrs:{class:"language-php"}},[_("code",[_("span",{pre:!0,attrs:{class:"token php language-php"}},[_("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token function"}},[t._v("header")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Content-Type: text/html; charset=UTF-8'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),_("h3",{attrs:{id:"internationalization-i18n-and-localization-l10n"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#internationalization-i18n-and-localization-l10n"}},[t._v("#")]),t._v(" Internationalization (i18n) and Localization (l10n)")]),t._v(" "),_("ul",[_("li",[t._v("번역 아직안됨")])]),t._v(" "),_("h2",{attrs:{id:"ch07-의존성-주입"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch07-의존성-주입"}},[t._v("#")]),t._v(" ch07. 의존성 주입")]),t._v(" "),_("ul",[_("li",[t._v("의존성 주입(Dependency Injection, DI)은 프로그래밍에서 구성요소간의 종속성을 소스코드에서 설정하지 않고 외부의 설정파일 등을 통해 컴파일 시점이나 실행 시점에 주입하도록 하는 디자인 패턴 중의 하나이다.")])]),t._v(" "),_("h3",{attrs:{id:"복잡한-문제"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#복잡한-문제"}},[t._v("#")]),t._v(" 복잡한 문제")]),t._v(" "),_("h4",{attrs:{id:"제어의-역전"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#제어의-역전"}},[t._v("#")]),t._v(" 제어의 역전")]),t._v(" "),_("ul",[_("li",[t._v("예를 들어 MVC 프레임워크는 보통 수퍼 개체나 베이스 컨트롤러를 제공하는데, 우리가 구현하는 컨트롤러는 반드시 베이스 컨트롤러를 상속받아야 하고 그래야만 의존 관계에 있는 모델이나 뷰에 접근할 수 있게 됩니다")]),t._v(" "),_("li",[t._v("이것은 제어의 역전이 맞기는 한데 의존 관계를 느슨하게 만들었다기 보다는 단순히 위치를 이동시킨 것 뿐입니다.")]),t._v(" "),_("li",[t._v("의존성 주입을 사용하게 되면 이런 문제를 유연하게 풀 수 있게 됩니다.")])]),t._v(" "),_("h3",{attrs:{id:"s-o-l-i-d"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#s-o-l-i-d"}},[t._v("#")]),t._v(" S.O.L.I.D.")]),t._v(" "),_("h4",{attrs:{id:"단일-책임-원칙-srp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#단일-책임-원칙-srp"}},[t._v("#")]),t._v(" 단일 책임 원칙 (SRP)")]),t._v(" "),_("ul",[_("li",[t._v("클래스는 한가지 이유로만 변경되어야 한다.”라는 내용입니다. 이는 모든 클래스가 소프트웨어가 제공하는 기능의 오직 한가지에 대해서만 책임을 져야 함을 의미합니다. 이 접근법의 가장 큰 이점은 코드 _재사용성_을 향상시킬 수 있다는 것입니다")])]),t._v(" "),_("h4",{attrs:{id:"개방-폐쇄-open-closed-의-원칙-ocp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#개방-폐쇄-open-closed-의-원칙-ocp"}},[t._v("#")]),t._v(" 개방/폐쇄(Open/Closed)의 원칙 (OCP)")]),t._v(" "),_("ul",[_("li",[t._v("소프트웨어 개체(클래스, 모듈, 함수 등)는 확장을 위해 열려 있어야 하지만 수정을 위해 닫혀 있어야 합니다")]),t._v(" "),_("li",[t._v("실용적 측면에서 보면, 이것은 _인터페이스_를 구현하고 준수하는 클래스를 작성한 다음 특정 클래스 대신 해당 인터페이스에 대해 타입 힌트를 작성해야 함을 의미합니다.")]),t._v(" "),_("li",[t._v("가장 큰 이점은 기존 코드를 수정하지 않고도 새로운 무언가를 지원함으로써 코드를 매우 쉽게 확장")])]),t._v(" "),_("h4",{attrs:{id:"리스코브-liskov-치환의-원칙-lsp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#리스코브-liskov-치환의-원칙-lsp"}},[t._v("#")]),t._v(" 리스코브(Liskov) 치환의 원칙 (LSP)")]),t._v(" "),_("ul",[_("li",[t._v("Liskov 치환 원칙은 하위 유형 지정과 상속에 관한 것입니다. “자식 클래스는 절대로 부모 클래스의 타입 정의를 깨뜨리 면 안됩니다”. 로버트 C. 마틴(Robert C. Martin)의 말에 따르면, “서브 타입은 부모 타입을 대체 할 수 있어야 합니다”.")])]),t._v(" "),_("h4",{attrs:{id:"인터페이스-분리의-원칙-isp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#인터페이스-분리의-원칙-isp"}},[t._v("#")]),t._v(" 인터페이스 분리의 원칙 (ISP)")]),t._v(" "),_("ul",[_("li",[t._v("“클라이언트는 사용하지 않는 메소드에 의존하면 안됩니다.”. 즉, 모든 클래스가 따라야 하는 하나의 단일 인터페이스 대신, 클래스가 하나 혹은 그 이상을 구현할 수 있는 더 작고 개념에 기반한 인터페이스 세트를 제공")])]),t._v(" "),_("h4",{attrs:{id:"의존성-역전의-원칙-dip"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#의존성-역전의-원칙-dip"}},[t._v("#")]),t._v(" 의존성 역전의 원칙 (DIP)")]),t._v(" "),_("ul",[_("li",[t._v("의존성 역전의 원칙은 개별 클래스 간의 하드 링크를 제거하여 다른 클래스를 전달하는 방식으로 새로운 기능을 활용할 수 있도 록하는 것입니다")]),t._v(" "),_("li",[t._v("“추상화에 의존해야 하고, 구현에 의존하지 말아야 합니다.”. 간단히 말해서, 이는 우리의 의존성이 구체적 인 구현이 아닌 인터페이스/계약(contract) 또는 추상 클래스여야 함을 의미합니다")])]),t._v(" "),_("h3",{attrs:{id:"컨테이너"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너"}},[t._v("#")]),t._v(" 컨테이너")]),t._v(" "),_("ul",[_("li",[t._v("의존성 주입 컨테이너(Dependency Injection Containers)를 다룰 때, 의존성 주입 컨테이너는 의존성 주입과 같지 않다는 사실을 가장 처음으로 이해해야만 합니다")]),t._v(" "),_("li",[t._v("컨테이너는 의존성 주입 패턴의 구현을 도와주는 편리한 유틸리티인 것은 맞지만, 의존성 주입 패턴의 안티패턴인 서비스 로케이터(Service Locator) 패턴을 구현하는데 잘못 사용되는 일도 잦습니다")])]),t._v(" "),_("h2",{attrs:{id:"ch08-데이터베이스"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch08-데이터베이스"}},[t._v("#")]),t._v(" ch08. 데이터베이스")]),t._v(" "),_("h3",{attrs:{id:"mysql-익스텐션"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql-익스텐션"}},[t._v("#")]),t._v(" MySQL 익스텐션")]),t._v(" "),_("ul",[_("li",[t._v("PHP의 MySQL익스텐션은 아주 오래되었고, 다음 두 익스텐션으로 대체되었습니다.\n"),_("ul",[_("li",[t._v("mysqli")]),t._v(" "),_("li",[t._v("pdo")])])]),t._v(" "),_("li",[t._v("PHP 5.5.0 부터는 공식적으로 사용을 권장하지 않는 상태(deprecated)였고, PHP 7.0에서는 공식적으로 제거 되었습니다.")])]),t._v(" "),_("h3",{attrs:{id:"pdo-익스텐션"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pdo-익스텐션"}},[t._v("#")]),t._v(" PDO 익스텐션")]),t._v(" "),_("ul",[_("li",[t._v("PHP 5.1.0부터 제공되는 데이터베이스 연결 추상화 라이브러리입니다. 많은 종류의 데이터베이스 연결에 대해서 공통적인 인터페이스를 제공합니다")]),t._v(" "),_("li",[t._v("여러 종류의 데이터베이스 연결을 동일한 API로 할 수 있게 해준다는 의미입니다.")]),t._v(" "),_("li",[t._v("SQL 인젝션 공격을 걱정하지 않고도 외부 입력(사용자 ID 등) 값을 SQL 쿼리에 넣을 수 있게 해주는 것입니다")]),t._v(" "),_("li",[t._v("먼저 데이터를 필터링하고, 다른 위험한 요소(HTML 태그, 자바스크립트 등)를 제거하는 것은 INSERT나 UPDATE와 같은 쓰기 작업에 특히 중요합니다.")]),t._v(" "),_("li",[t._v("PDO는 여러분이 작성하는 어플리케이션이 아니라, SQL에서만 위험한 요소를 제거합니다.")]),t._v(" "),_("li",[t._v("PDO를 사용하면 PDO 개체가 파괴될 때 암시적으로 데이터베이스 연결을 닫아 줍니다")])]),t._v(" "),_("h3",{attrs:{id:"데이터베이스와-상호작용-하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#데이터베이스와-상호작용-하기"}},[t._v("#")]),t._v(" 데이터베이스와 상호작용 하기")]),t._v(" "),_("ul",[_("li",[t._v("데이터베이스 접근과 프리젠테이션을 모든 경우에 반드시 분리해야만 하는 것은 아니지만, 그 둘을 서로 많이 섞을수록 점점 문제가 발생하게 될 것입니다. 특히 유닛 테스트를 하려는 경우에는 더 심각할 것입니다.")])]),t._v(" "),_("h3",{attrs:{id:"추상화-레이어"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#추상화-레이어"}},[t._v("#")]),t._v(" 추상화 레이어")]),t._v(" "),_("ul",[_("li",[t._v("추상화라는 게 어느 정도의 오버헤드가 있기는 하지만, MySQL, PostgreSQL, SQLite 등의 여러 데이터베이스를 선택적으로 사용할 수 있는 유연한 어플리케이션을 만들기로 했다면 그 정도의 오버헤드는 코드의 간결함과 유지보수성을 위해서라면 문제가 되지 않는 수준일 것입니다")])]),t._v(" "),_("h2",{attrs:{id:"ch09-템플릿"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch09-템플릿"}},[t._v("#")]),t._v(" ch09. 템플릿")]),t._v(" "),_("ul",[_("li",[t._v("템플릿은 프레젠테이션 로직(Presentation Logic)에서 컨트롤러(Controller)와 도메인 로직(Domain Logic)으로 분리하는 편리한 방법을 제공합니다")]),t._v(" "),_("li",[t._v("템플릿은 때때로 “뷰(view)”라고 언급되는데, 소프트웨어 설계 패턴인 MVC(모델-뷰-컨트롤러, Model-View-Controller)패턴의 두 번째 구성 요소 입니다.")])]),t._v(" "),_("h3",{attrs:{id:"장점"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#장점"}},[t._v("#")]),t._v(" 장점")]),t._v(" "),_("ul",[_("li",[t._v("템플릿 사용의 주요 장점은 어플리케이션에서 프레젠테이션 로직이 나머지 부분들과 완전히 분리되는 것 입니다. 템플릿은 컨텐츠를 표시하는 책임만을 가집니다")])]),t._v(" "),_("h3",{attrs:{id:"단순-php-템플릿"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#단순-php-템플릿"}},[t._v("#")]),t._v(" 단순 PHP 템플릿")]),t._v(" "),_("ul",[_("li",[t._v("PHP 코드를 HTML과 같은 다른언어와 결합해 사용할 수 있다는 것 입니다.")])]),t._v(" "),_("h3",{attrs:{id:"컴파일되는-템플릿"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#컴파일되는-템플릿"}},[t._v("#")]),t._v(" 컴파일되는 템플릿")]),t._v(" "),_("ul",[_("li",[t._v("PHP는 성숙한, 객체 지향적 언어로 성장하고 있지만, 템플릿 언어로는 성장하지 않았습니다.")]),t._v(" "),_("li",[t._v("Twig나 Smarty와 같이 컴파일된 템플릿은 특히, 템플릿을 대상으로 제공되는 새로운 구문으로 기존의 부족했던 부분을 채워줬습니다")]),t._v(" "),_("li",[t._v("이러한 템플릿은 컴파일을 해야하기 때문에 약간의 성능저하가 있을 수 있지만, 적절한 캐싱을 사용하면 아주 미미한 차이 일 것입니다.")])]),t._v(" "),_("h2",{attrs:{id:"ch10-에러와-예외"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch10-에러와-예외"}},[t._v("#")]),t._v(" ch10. 에러와 예외")]),t._v(" "),_("h3",{attrs:{id:"에러"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#에러"}},[t._v("#")]),t._v(" 에러")]),t._v(" "),_("ul",[_("li",[t._v("PHP 언어의 핵심적인 부분들에서도 함수가 아닌 클래스 인스턴스를 사용할 때에는 점점 예외를 많이 사용하는 분위기로 가고 있지만, 대부분의 경우에는 심각한 에러(fatal error)가 발생한 경우가 아니고서는 무슨 일이 발생하든지 최대한 처리를 계속 진행시키는 것이 PHP의 방식입니다.")])]),t._v(" "),_("h4",{attrs:{id:"에러-심각도"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#에러-심각도"}},[t._v("#")]),t._v(" 에러 심각도")]),t._v(" "),_("ul",[_("li",[t._v("가장 일반적인 것으로는 에러(error), 알림(notice), 경고(warning)이 있습니다")]),t._v(" "),_("li",[t._v("컴파일 시에 발생하는 E_STRICT라는 에러는 추후에 나올 PHP 버전과의 호환성을 위해서 수정이 필요한 코드에서 발생합니다.")])]),t._v(" "),_("h4",{attrs:{id:"php의-에러-보고-방식을-변경하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#php의-에러-보고-방식을-변경하기"}},[t._v("#")]),t._v(" PHP의 에러 보고 방식을 변경하기")]),t._v(" "),_("ul",[_("li",[t._v("PHP 설정을 변경하거나 함수 호출을 하여 에러 보고 방식을 바꿀 수 있습니다")]),t._v(" "),_("li",[t._v("에러가 웹 화면에 표시되게 할 것인지(개발 할때 좋습니다), 웹 화면에는 표시되지 않고 로그만 남기게 할 것인지(서비스 환경에 좋습니다) 제어할 수도 있습니다.")])]),t._v(" "),_("h4",{attrs:{id:"코드-한-줄-안에서만-에러-보고-끄기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#코드-한-줄-안에서만-에러-보고-끄기"}},[t._v("#")]),t._v(" 코드 한 줄 안에서만 에러 보고 끄기")]),t._v(" "),_("ul",[_("li",[t._v("에러 제어 연산자인 @ 를 사용하여 에러를 표시하지 않도록 할 수 있습니다. 표현식의 시작 부분에 이 연산자를 붙이면 해당 표현식에서 발생하는 모든 에러가 표시되지 않습니다.")])]),t._v(" "),_("div",{staticClass:"language-php extra-class"},[_("pre",{pre:!0,attrs:{class:"language-php"}},[_("code",[_("span",{pre:!0,attrs:{class:"token php language-php"}},[_("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" @"),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foo")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),_("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'bar'")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),_("ul",[_("li",[t._v("$foo 변수가 없다든지 'bar' 키가 없을 때에도 아무런 에러를 출력하지 않고 null 을 리턴합니다")]),t._v(" "),_("li",[t._v("@ 연산자가 붙은 표현식을 처리할 때 @ 연산자가 없는 표현식보다 좀 비효율적으로 처리합니다.")]),t._v(" "),_("li",[t._v("에러 제어 연산자를 사용하지 않을 수 있는 방법이 있다면, 가능하면 그렇게 하는 편이 좋습니다")])]),t._v(" "),_("h4",{attrs:{id:"errorexception"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#errorexception"}},[t._v("#")]),t._v(" ErrorException")]),t._v(" "),_("ul",[_("li",[t._v("PHP도 완벽하게 “예외를 적극적으로 사용하는” 프로그래밍 언어로서 동작할 수 있는 능력이 있습니다")]),t._v(" "),_("li",[t._v("기본적으로는 “에러”를 “예외”로 던지는 식으로 하면 됩니다. Exception 클래스를 상속한 ErrorException 예외를 사용해서 말입니다.")])]),t._v(" "),_("h3",{attrs:{id:"예외"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#예외"}},[t._v("#")]),t._v(" 예외")]),t._v(" "),_("ul",[_("li",[t._v("에러가 발생했을 때에는 예외(Exception)을 던지도록 작성해야 합니다. 그래야 어떤 에러가 발생했는지 개발자가 명확하게 알 수 있고, 어떤 방식으로 그 에러를 처리할 것인지 개발자 직접 결정할 수 있게 됩니다.")])]),t._v(" "),_("h4",{attrs:{id:"spl-예외"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spl-예외"}},[t._v("#")]),t._v(" SPL 예외")]),t._v(" "),_("ul",[_("li",[t._v("예외 클래스를 구체적으로 만들면 여러 개의 catch 문을 달아서 다른 종류의 예외를 서로 다르게 처리할 수 있게 됩니다")]),t._v(" "),_("li",[t._v("너무 많은 예외 클래스를 만들어야 하는 것이 문제가 될 수도 있는데, 앞서 얘기한 SPL 익스텐션에서 포함되어 있는 SPL 예외 클래스들을 적절히 사용한다면 그런 문제를 줄일 수 있습니다")]),t._v(" "),_("li",[t._v("예를 들어 __call() 특수 매서드(Magic Method)에 잘못된 메소드 호출이 들어온 상황을 처리할 때, 두루뭉실하게 그냥 Exception을 던지거나 Exception 클래스를 상속받은 예외 클래스를 작성해서 던지는 대신에 throw new BadMethodCallException; 이라고 할 수 있겠습니다.")])]),t._v(" "),_("h2",{attrs:{id:"ch11-보안"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch11-보안"}},[t._v("#")]),t._v(" ch11. 보안")]),t._v(" "),_("h3",{attrs:{id:"웹-어플리케이션-보안"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#웹-어플리케이션-보안"}},[t._v("#")]),t._v(" 웹 어플리케이션 보안")]),t._v(" "),_("ol",[_("li",[t._v("코드와 데이터 분리")])]),t._v(" "),_("ul",[_("li",[t._v("데이터가 코드처럼 실행된다면, SQL Injection, Cross-Site Scripting, Local/Remote File Inclusion 등을 당할 것입니다")])]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("어플리케이션 로직.")])]),t._v(" "),_("ul",[_("li",[t._v("인증 또는 인가를 빠뜨리는 것.")]),t._v(" "),_("li",[t._v("입력값 검증.")])]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[t._v("운영 환경.")])]),t._v(" "),_("ul",[_("li",[t._v("PHP 버전.")]),t._v(" "),_("li",[t._v("Third party 라이브러리.")]),t._v(" "),_("li",[t._v("운영체제.")])]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("약한 암호화.")])]),t._v(" "),_("ul",[_("li",[t._v("Weak random numbers.")]),t._v(" "),_("li",[t._v("Chosen-ciphertext attacks.")]),t._v(" "),_("li",[t._v("Side-channel information leaks.")])]),t._v(" "),_("h3",{attrs:{id:"패스워드-해시"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#패스워드-해시"}},[t._v("#")]),t._v(" 패스워드 해시")]),t._v(" "),_("ul",[_("li",[t._v("해싱은 되돌릴 수없는 단방향 함수입니다. 이렇게하면 사실상 길이를 바꿀 수없는 고정 길이 문자열이 생성됩니다.")]),t._v(" "),_("li",[t._v("해싱과 달리 암호화는 되돌릴 수 있습니다(키가있는 경우). 암호화는 다른 영역에서 유용하지만 패스워드를 안전하게 저장하기 위해서라면 좋은 전략이 아닙니다")]),t._v(" "),_("li",[t._v("패스워드는 해시하기 전에 각 패스워드 전에 임의의(random) 문자열을 추가하는 것으로 소금치기(솔팅,salting) 해야합니다. 이것은 사전 공격과 “레인보우 테이블”(일반적인 패스워드에 대한 암호 해시 목록)을 사용을 방어합니다")]),t._v(" "),_("li",[t._v("고속의 범용 암호화 해시 함수(예 : SHA256)보다는 전문화 된 패스워드 해싱 알고리즘을 사용해야합니다. 수용할 만한 암호 해싱 알고리즘의 몇가지는 (2018년 6월 기준) 아래와 같습니다:\n"),_("ul",[_("li",[t._v("Argon2 (PHP 7.2 이상 사용 가능)")]),t._v(" "),_("li",[t._v("Scrypt")]),t._v(" "),_("li",[t._v("Bcrypt (PHP에서 제공. 아래에서 확인하세요.)")]),t._v(" "),_("li",[t._v("PBKDF2 with HMAC-SHA256 or HMAC-SHA512")])])])]),t._v(" "),_("h4",{attrs:{id:"password-hash로-패스워드-해시하기"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#password-hash로-패스워드-해시하기"}},[t._v("#")]),t._v(" password_hash로 패스워드 해시하기")]),t._v(" "),_("ul",[_("li",[t._v("PHP 5.5에는 password_hash()가 도입되었습니다. 지금은 PHP에서 제공되는 가장 강력한 알고리즘인 BCrypt를 사용하게 구현되어 있는데, 아마도 미래에는 더 나은 알고리즘들을 지원하게 업데이트될 것입니다")])]),t._v(" "),_("h3",{attrs:{id:"데이터-필터링"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#데이터-필터링"}},[t._v("#")]),t._v(" 데이터 필터링")]),t._v(" "),_("ul",[_("li",[t._v("외부로부터의 입력은 절대(절대로) 믿어서는 안됩니다. 외부에서 입력 받은 데이터를 사용하기 전에는 반드시 검증하고 위험한 요소를 제거해야 합니다.")]),t._v(" "),_("li",[t._v("filter_var()와 filter_input() 함수를 사용하여 텍스트에서 위험한 내용을 제거하고, 규칙(메일 주소 등)에 맞는지 검증할 수 있습니다")]),t._v(" "),_("li",[t._v("외부 입력은 어느 것이라도 될 수 있습니다. $_GET이나 $_POST 폼 데이터, $_SERVER 변수에 있는 값들, fopen('php://input', 'r')로 읽은 HTTP 요청 내용 등이 그 대상이라고 할 수 있습니다")]),t._v(" "),_("li",[t._v("데이터를 처리하거나, 출력하거나, 조합하거나 여러분의 코드에 포함시킬 때마다 그 데이터를 적절히 필터링해서 믿을 수 있는 데이터로 처리한 상태인지 항상 스스로에게 확인하세요.")]),t._v(" "),_("li",[t._v("XSS를 막는 방법으로는 사용자가 생성한 데이터를 웹 페이지에 출력하기 전에는 항상 strip_tags() 함수를 사용해서 HTML 태그를 모두 제거한다든지, htmlentities()와 htmlspecialchars() 함수를 사용하여 HTML 엔티티로 변경하여 출력하는 방법이 있습니다.")]),t._v(" "),_("li",[t._v("또다른 위험한 상황은 커맨드라인 옵션으로 전달받은 값을 사용하는 상황입니다")]),t._v(" "),_("li",[t._v('마지막으로 위험한 상황의 예로 설명할 것은, 외부 입력값을 바탕으로 로드할 파일을 결정하여 파일시스템으로부터 그 파일을 로드하는 상황입니다. 그런 상황이라면 파일 이름을 파일 경로로 변경하는 방법으로 뚫릴 가능성이 있겠습니다. 입력 데이터에서 "/", "../", null bytes 문자를 제거해야 하고, 그 외에도 숨겨진 파일, 공개되지 않아야 하는 파일, 민감한 정보가 들어있는 파일의 경로들을 필터링해야 합니다.')])]),t._v(" "),_("h4",{attrs:{id:"위험한-입력-제거-sanitization"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#위험한-입력-제거-sanitization"}},[t._v("#")]),t._v(" 위험한 입력 제거(Sanitization)")]),t._v(" "),_("ul",[_("li",[t._v("외부 입력으로 받은 문자열에서 위험하거나 필요없는 문자열을 제거하거나 이스케이프처리 하는 일을 Sanitization 이라고 합니다.")]),t._v(" "),_("li",[t._v("PDO의 파라미터 바인딩을 사용한다면 PDO가 자동으로 그러한 처리를 해 줍니다.")])]),t._v(" "),_("h4",{attrs:{id:"역직렬화-unserialization"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#역직렬화-unserialization"}},[t._v("#")]),t._v(" 역직렬화(Unserialization)")]),t._v(" "),_("ul",[_("li",[t._v("사용자나 신뢰할 수 없는 곳으로부터 받은 데이터에 unserialize() 사용하는 것은 위험합니다. 객체 자체가 사용되지 않는다고 하더라도 이는 악의를 가진 사용자가 사용자 정의 프로퍼티를 가지고 소멸자(destructors)는 실행하게되는 객체를 만들어내도록 허용하게 됩니다")]),t._v(" "),_("li",[t._v("신뢰할 수 없는 곳으로부터의 데이터를 역직렬화해야만 한다면, PHP 7의 allowed_classes 옵션을 사용하여 역직렬화 가능한 객체 형식을 제한하세요.")])]),t._v(" "),_("h4",{attrs:{id:"데이터-검증"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#데이터-검증"}},[t._v("#")]),t._v(" 데이터 검증")]),t._v(" "),_("ul",[_("li",[t._v("데이터 검증을 통해서 외부 입력 데이터가 여러분이 기대한 입력 형태가 맞는지 확인하도록 합니다")]),t._v(" "),_("li",[t._v("예를 들어 메일 주소, 전화 번호, 혹은 사용자의 나이 등의 입력을 검증하고 싶을 때가 있을 것입니다.")])]),t._v(" "),_("h3",{attrs:{id:"설정-파일"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#설정-파일"}},[t._v("#")]),t._v(" 설정 파일")]),t._v(" "),_("ul",[_("li",[t._v("설정 정보를 저장하는 곳은 웹 서버를 통해서 직접적으로 액세스하거나 읽어올 수 있는 위치는 피해야 합니다.")]),t._v(" "),_("li",[t._v("웹 서버의 도큐먼트 루트에 설정을 저장할 필요가 있다면, 설정 파일 확장자를 .php로 하세요. 설정 파일에 접근하는 일이 생기더라도 설정 내용이 출력되지는 않을 것입니다.")]),t._v(" "),_("li",[t._v("설정 파일에 있는 정보는 적절하게 보호되어야 합니다. 민감한 텍스트는 암호화하고, 파일 시스템의 권한을 조정하여 아무나 열어보지 못하게 하세요.")]),t._v(" "),_("li",[t._v("패스워드나 API 토큰과 같은 민감한 정보를 담고 있는 설정 파일은 소스 컨트롤에 커밋하지 않도록 확실히 조치하는 것이 좋습니다")])]),t._v(" "),_("h3",{attrs:{id:"register-globals"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#register-globals"}},[t._v("#")]),t._v(" Register Globals")]),t._v(" "),_("ul",[_("li",[t._v("NOTE: PHP 5.4.0 부터 register_globals 설정은 제거되어서 더이상 사용되지 않습니다. 이 설정은 단지 기존 어플리케이션을 업그레이드하려는 사람들에게 경고하기 위한 목적으로 포함되어 있습니다")]),t._v(" "),_("li",[t._v("register_globals 설정을 활성화하면 $_POST, $_GET, $_REQUEST 에 들어있는 값들을 글로벌 스코프의 변수로 등록해줍니다.")]),t._v(" "),_("li",[t._v("만약 PHP 5.4.0 이전 버전을 사용한다면 register_globals 설정을 반드시 off 로 설정하시기 바랍니다.")])]),t._v(" "),_("h3",{attrs:{id:"에러-보고"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#에러-보고"}},[t._v("#")]),t._v(" 에러 보고")]),t._v(" "),_("ul",[_("li",[t._v("에러 로깅은 어플리케이션의 문제 지점을 찾는데 유용하기도 하지만, 어플리케이션의 구조를 외부에 노출시키는 문제가 있기도 합니다")]),t._v(" "),_("li",[t._v("이러한 이슈가 발생하지 않게 하려면 개발용 서버와 운영(라이브) 서버의 설정을 다르게 해야 합니다")])]),t._v(" "),_("h3",{attrs:{id:"php-버전별로-모든-에러를-표시하게-설정하는-방법"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#php-버전별로-모든-에러를-표시하게-설정하는-방법"}},[t._v("#")]),t._v(" PHP 버전별로 모든 에러를 표시하게 설정하는 방법")]),t._v(" "),_("ul",[_("li",[t._v("< 5.3 -1 or E_ALL")]),t._v(" "),_("li",[t._v("5.3 -1 or E_ALL | E_STRICT")]),t._v(" "),_("li",[_("blockquote",[_("p",[t._v("5.3 -1 or E_ALL")])])])]),t._v(" "),_("h2",{attrs:{id:"ch12-테스트"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ch12-테스트"}},[t._v("#")]),t._v(" ch12. 테스트")]),t._v(" "),_("h3",{attrs:{id:"테스트-주도-개발-tdd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#테스트-주도-개발-tdd"}},[t._v("#")]),t._v(" 테스트 주도 개발 (TDD)")]),t._v(" "),_("ul",[_("li",[t._v("테스트 주도 개발(test-driven development, TDD)은 매우 짧은 개발 사이클을 반복하는 소프트웨어 개발 프로세스 중 하나이다. 우선 개발자는 바라는 향상 또는 새로운 함수를 정의하는 (초기적 결함을 점검하는) 자동화된 테스트 케이스를 작성한다. 그런 후에, 그 케이스를 통과하기 위한 최소한의 양의 코드를 생성한다. 그리고 마지막으로 그 새 코드를 표준에 맞도록 리팩토링한다.")])]),t._v(" "),_("h4",{attrs:{id:"유닛-테스트"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#유닛-테스트"}},[t._v("#")]),t._v(" 유닛 테스트")]),t._v(" "),_("ul",[_("li",[t._v("유닛 테스트(Unit Testing)는 함수, 클래스, 메소드가 기대한 대로 동작하는지를 검증하는 프래그래밍 측면의 접근 방법")]),t._v(" "),_("li",[t._v("함수나 메소드의 입출력을 검사함으로써 내부 로직이 올바르게 동작하는지를 테스트하는 방식입니다.")]),t._v(" "),_("li",[t._v("의존성 주입(Dependency Injection) 기법을 활용하면서 “모의(mock)” 개체와 스텁(stub)들을 사용하여 서로 의존 관계에 있는 클래스들이 올바르게 연동되어 있는지 테스트함으로써 테스트 커버리지를 더 높일 수 있습니다.")]),t._v(" "),_("li",[t._v("유닛 테스트는 오픈 소스 프로젝트에 기여하는 방식에도 도움을 줍니다. 만약 여러분이 기능 결함을 재현시키는 유닛 테스트 (즉 실패하는 유닛 테스트 케이스)를 작성할 수 있고 그 결함을 고친 후 테스트가 통과되는 것을 보여준다면, 여러분의 패치 제안을 오픈 소스 프로젝트 관리자가 받아들여줄 가능성이 훨씬 높을 것입니다")]),t._v(" "),_("li",[t._v("만약 여러분이 GitHub 등에서 프로젝트를 관리하고 있고 다른 사람들의 pull request 를 받을 생각이라면, pull request 를 보내는 사람들에게 기본적으로 이러한 유닛 테스트를 포함시켜 보내라고 가이드하는 것이 좋습니다.")]),t._v(" "),_("li",[t._v("PHPUnit이라는 테스트 프레임워크가 PHP 에서는 거의 업계 표준적인 위치에 있지만 다른 유닛 테스트 프레임워크들도 상당수 존재합니다.")])]),t._v(" "),_("h4",{attrs:{id:"통합-테스트"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#통합-테스트"}},[t._v("#")]),t._v(" 통합 테스트")]),t._v(" "),_("ul",[_("li",[t._v("통합 테스트(Integration testing, 때로는 통합과 테스트(Integration and Testing)이라고 하며 줄여서 I&T)는 개별적인 소프트웨어 모듈을 결합시켜 테스트하는 단계이다. 통합 테스트는 유닛 테스트 이후와 검증 테스트(validation testing) 사이에 수행된다. 유닛 테스트가 된 모듈들을 그룹지어 더 큰 단위로 합친 후, 통합 테스트 계획에 따라 테스트를 수행하여 시스템 테스트를 수행할 수 있는 정도로 개발이 완료되었는지 확인한다.")])]),t._v(" "),_("h4",{attrs:{id:"기능-테스트"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#기능-테스트"}},[t._v("#")]),t._v(" 기능 테스트")]),t._v(" "),_("ul",[_("li",[t._v("기능 테스트는 실제로 어플리케이션을 동작시켜주는 도구를 사용하여 자동화된 테스트를 만들어서 수행하는 것입니다")])]),t._v(" "),_("h5",{attrs:{id:"기능-테스트를-위한-도구"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#기능-테스트를-위한-도구"}},[t._v("#")]),t._v(" 기능 테스트를 위한 도구")]),t._v(" "),_("ul",[_("li",[t._v("Selenium")]),t._v(" "),_("li",[t._v("Mink")]),t._v(" "),_("li",[t._v("Codeception은 인수 테스트 도구를 포함하는 풀스택(full-stack) 테스트 프레임워크입니다.")]),t._v(" "),_("li",[t._v("Storyplayer는 테스트 환경을 필요에 따라 생성하거나 파괴할 수 있는 기능을 포함하는 풀스택(full-stack) 테스트 프레임워크입니다.")])]),t._v(" "),_("h3",{attrs:{id:"행위-주도-개발-bdd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#행위-주도-개발-bdd"}},[t._v("#")]),t._v(" 행위 주도 개발 (BDD)")]),t._v(" "),_("ul",[_("li",[t._v("행위 주도 개발(Behavior-Driven Development, BDD)에는 SpecBDD와 StoryBDD라는 두 가지 형태가 있습니다.")]),t._v(" "),_("li",[t._v("SpecBDD는 코드의 기술적인 행위에 초점을 맞춤")]),t._v(" "),_("li",[t._v("StoryBDD는 비즈니스 관점이나 기능 관점의 행위와 상호작용에 초점을 맞춤")])])])}),[],!1,null,null,null);a.default=v.exports}}]);