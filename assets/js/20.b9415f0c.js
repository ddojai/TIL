(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{377:function(t,a,r){"use strict";r.r(a);var e=r(45),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"annotation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#annotation"}},[t._v("#")]),t._v(" Annotation")]),t._v(" "),r("h2",{attrs:{id:"contoller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#contoller"}},[t._v("#")]),t._v(" Contoller")]),t._v(" "),r("h3",{attrs:{id:"restcontroller"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restcontroller"}},[t._v("#")]),t._v(" @RestController")]),t._v(" "),r("ul",[r("li",[t._v("컨트롤러를 JSON을 반환하는 컨트롤러로 만들어 준다.")]),t._v(" "),r("li",[t._v("@ResponseBody를 각 메소드마다 선언했던 것을 한번에 사용할 수 있게 해준다.")])]),t._v(" "),r("h3",{attrs:{id:"getmapping"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#getmapping"}},[t._v("#")]),t._v(" @GetMapping")]),t._v(" "),r("ul",[r("li",[t._v("HTTP Method인 Get의 요청을 받을 수 있는 API를 만들어 줍니다.")]),t._v(" "),r("li",[t._v("예전에는 @RequestMapping(method = RequestMethod.GET)으로 사용되었음.")])]),t._v(" "),r("h3",{attrs:{id:"requestparam"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#requestparam"}},[t._v("#")]),t._v(" @RequestParam")]),t._v(" "),r("ul",[r("li",[t._v("외부에서 API로 넘긴 파라미터를 가져오는 어노테이션")])]),t._v(" "),r("h3",{attrs:{id:"transactional-readonly-true"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#transactional-readonly-true"}},[t._v("#")]),t._v(" @Transactional(readOnly = true)")]),t._v(" "),r("ul",[r("li",[t._v("트랜잭션 범위는 유지하되, 조회 기능만 남겨두어 조회 속도 개선")])]),t._v(" "),r("h2",{attrs:{id:"test"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[t._v("#")]),t._v(" Test")]),t._v(" "),r("h3",{attrs:{id:"runwith-springrunner-class"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#runwith-springrunner-class"}},[t._v("#")]),t._v(" @RunWith(SpringRunner.class)")]),t._v(" "),r("ul",[r("li",[t._v("테스트를 진행할 때 JUnit에 내장된 실행자 외에 다른 실행자를 실행시킵니다.")]),t._v(" "),r("li",[t._v("여기서는 SpringRunner라는 스프링 실행자를 사용합니다.")]),t._v(" "),r("li",[t._v("즉, 스프링 부트 테스트와 JUnit사이에 연결자 역할을 합니다.")])]),t._v(" "),r("h3",{attrs:{id:"webmvctest"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webmvctest"}},[t._v("#")]),t._v(" @WebMvcTest")]),t._v(" "),r("ul",[r("li",[t._v("여러 스프링 테스트 어노테이션 중, Web(Srping MVC)에 집중할 수 있는 어노테이션 입니다.")]),t._v(" "),r("li",[t._v("선언할 경우 @Controller, @ControllerAdvice 등을 사용할 수 있습니다.")]),t._v(" "),r("li",[t._v("단, @Service, @Component, @Repository 등은 사용할 수 없습니다.")]),t._v(" "),r("li",[t._v("JPA 기능이 작동하지 않음")])]),t._v(" "),r("h3",{attrs:{id:"autowired"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#autowired"}},[t._v("#")]),t._v(" @Autowired")]),t._v(" "),r("ul",[r("li",[t._v("스프링이 관리하는 빈(Bean)을 주입 받습니다.")])]),t._v(" "),r("h3",{attrs:{id:"org-junit-after"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#org-junit-after"}},[t._v("#")]),t._v(" @org.junit.After")]),t._v(" "),r("ul",[r("li",[t._v("Junit에서 단위 테스트가 끝날 때마다 수행되는 메소드를 지정")]),t._v(" "),r("li",[t._v("보통은 배포 전 전체 테스트를 수행할 때 테스트간 데이터 침범을 막기 위해 사용")]),t._v(" "),r("li",[t._v("여러 테스트가 동시에 수행되면 테스트용 데이터베이스인 H2에 데이터가 그대로 남아 있어 다음 테스트 실행 시 테스트가 실패할 수 있습니다.")])]),t._v(" "),r("h2",{attrs:{id:"entity"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#entity"}},[t._v("#")]),t._v(" Entity")]),t._v(" "),r("h3",{attrs:{id:"entity-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#entity-2"}},[t._v("#")]),t._v(" @Entity")]),t._v(" "),r("ul",[r("li",[t._v("테이블과 링크될 클래스임을 나타냅니다.")]),t._v(" "),r("li",[t._v("기본값으로 클래스의 카멜케이스 이름을 언더스코어 네이밍(_)으로 테이블 이름을 매칭\n"),r("ul",[r("li",[t._v("ex) SalesManager.java -> sales_manager table")])])])]),t._v(" "),r("h3",{attrs:{id:"id"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[t._v("#")]),t._v(" @Id")]),t._v(" "),r("ul",[r("li",[t._v("해당 테이블의 PK 필드를 나타냅니다.")])]),t._v(" "),r("h3",{attrs:{id:"generatedvalue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#generatedvalue"}},[t._v("#")]),t._v(" @GeneratedValue")]),t._v(" "),r("ul",[r("li",[t._v("PK의 생성 규칙을 나타냅니다.")]),t._v(" "),r("li",[t._v("기본값은 AUTO 로, MySQL의 auto_increment와 같이 자동증가하는 정수형 값이 됩니다.")]),t._v(" "),r("li",[t._v("스프링 부트 2.0에선 GenerationType.IDENTITY 옵션을 추가해야 auto_increment 적용 됨.")]),t._v(" "),r("li",[t._v("https://jojoldu.tistory.com/295")])]),t._v(" "),r("h3",{attrs:{id:"column"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#column"}},[t._v("#")]),t._v(" @Column")]),t._v(" "),r("ul",[r("li",[t._v("테이블의 컬럼을 나타내면, 굳이 선언하지 않더라도 해당 클래스의 필드는 모두 컬럼이 됩니다.")]),t._v(" "),r("li",[t._v("사용하는 이유는, 기본값 외에 추가로 변경이 필요한 옵션이 있을경우 사용합니다.")]),t._v(" "),r("li",[t._v("문자열의 경우 VARCHAR(255)가 기본값인데, 사이즈를 500으로 늘리고 싶거나, 타입을 TEXT로 변경하고 싶거나 등의 경우에 사용됩니다.")])]),t._v(" "),r("h3",{attrs:{id:"mappedsuperclass"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mappedsuperclass"}},[t._v("#")]),t._v(" @MappedSuperclass")]),t._v(" "),r("ul",[r("li",[t._v("JPA Entity 클래스들이 해당 클래스를 상속할 경우 필드들도 컬럼으로 인식하도록 합니다.")])]),t._v(" "),r("h3",{attrs:{id:"entitylisteners-auditingentitylistener-class"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#entitylisteners-auditingentitylistener-class"}},[t._v("#")]),t._v(" @EntityListeners(AuditingEntityListener.class)")]),t._v(" "),r("ul",[r("li",[t._v("클래스에 Auditing 기능을 포함시킵니다.")])]),t._v(" "),r("h3",{attrs:{id:"createddate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#createddate"}},[t._v("#")]),t._v(" @CreatedDate")]),t._v(" "),r("ul",[r("li",[t._v("Entity가 생성되어 저장될 때 시간이 자동 저장됩니다.")])]),t._v(" "),r("h3",{attrs:{id:"lastmodifieddate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lastmodifieddate"}},[t._v("#")]),t._v(" @LastModifiedDate")]),t._v(" "),r("ul",[r("li",[t._v("조회한 Entity의 값을 변경할 때 시간이 자동 저장됩니다.")])]),t._v(" "),r("h2",{attrs:{id:"lombok"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lombok"}},[t._v("#")]),t._v(" Lombok")]),t._v(" "),r("h3",{attrs:{id:"getter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#getter"}},[t._v("#")]),t._v(" @Getter")]),t._v(" "),r("ul",[r("li",[t._v("선언된 모든 필드의 get 메소드를 생성")])]),t._v(" "),r("h3",{attrs:{id:"lombok-requiredargsconstructor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lombok-requiredargsconstructor"}},[t._v("#")]),t._v(" @lombok.RequiredArgsConstructor")]),t._v(" "),r("ul",[r("li",[t._v("선언된 모든 final 필드가 포함된 생성자를 생성해 줍니다.")]),t._v(" "),r("li",[t._v("final이 없는 필드는 생성자에 포함되지 않습니다.")])]),t._v(" "),r("h3",{attrs:{id:"noargsconstructor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#noargsconstructor"}},[t._v("#")]),t._v(" @NoArgsConstructor")]),t._v(" "),r("ul",[r("li",[t._v("기본 생성자 자동 추가")]),t._v(" "),r("li",[t._v("access = AccessLevel.PROTECTED : 기본생성자의 접근 권한을 protected로 제한")]),t._v(" "),r("li",[t._v("생성자로 protected Posts() {}와 같은 효과")]),t._v(" "),r("li",[t._v("Entity 클래스를 프로젝트 코드상에서 기본생성자로 생성하는 것은 막되, JPA에서 Entity 클래스를 생성하는것은 허용하기 위해 추가")])]),t._v(" "),r("h3",{attrs:{id:"builder"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#builder"}},[t._v("#")]),t._v(" @Builder")]),t._v(" "),r("ul",[r("li",[t._v("해당 클래스의 빌더패턴 클래스를 생성")]),t._v(" "),r("li",[t._v("생성자 상단에 선언시 생성자에 포함된 필드만 빌더에 포함")])]),t._v(" "),r("h3",{attrs:{id:"setter"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#setter"}},[t._v("#")]),t._v(" @Setter")]),t._v(" "),r("ul",[r("li",[t._v("자바빈 규약을 생각하면서 getter/setter를 무작적 생성하는 경우가 있음\n"),r("ul",[r("li",[t._v("해당 클래스의 인스턴스 값들이 언제 어디서 변해야 하는지 코드상으로 명확하게 구분할 수가 없어, 차후 기능 변경 시 복잡")]),t._v(" "),r("li",[t._v("그래서 Entity 클래스에서는 절대 Setter 메소드를 만들지 않는다")])])]),t._v(" "),r("li",[t._v("Controller에서 @RequestBody로 외부에서 데이터를 받는 경우엔 기본생성자 + set메소드를 통해서만 값이 할당")]),t._v(" "),r("li",[t._v("이때만 setter를 허용")])]),t._v(" "),r("h3",{attrs:{id:"lombok-allargsconstructor"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lombok-allargsconstructor"}},[t._v("#")]),t._v(" @lombok.AllArgsConstructor")]),t._v(" "),r("ul",[r("li",[t._v("해당 클래스의 의존성 관계가 변경될 때 마다 생성자 코드를 계속해서 수정하는 번거로움을 해결")])]),t._v(" "),r("h2",{attrs:{id:"출처"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#출처"}},[t._v("#")]),t._v(" 출처")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=218568947",target:"_blank",rel:"noopener noreferrer"}},[t._v("스프링 부트와 aws로 혼자 구현하는 웹 서비스"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=s.exports}}]);